From a9ddb957d3f4fac185a2a8feb57dcf0020a037a3 Mon Sep 17 00:00:00 2001
From: maxime1907 <19607336+maxime1907@users.noreply.github.com>
Date: Fri, 17 May 2024 14:28:35 +0200
Subject: [PATCH] feat(examples): start-druid: autodetect cpu count in
 containers

---
 bin/start-druid-main.py | 66 +++++++++++++++++++++++++++++---
 1 file changed, 60 insertions(+), 6 deletions(-)

diff --git a/bin/start-druid-main.py b/bin/start-druid-main.py
index d797157230..928de27700 100644
--- a/bin/start-druid-main.py
+++ b/bin/start-druid-main.py
@@ -15,12 +15,13 @@
 # specific language governing permissions and limitations
 # under the License.
 
-import sys
-import os
-import multiprocessing
 import argparse
-import subprocess
+import math
+import multiprocessing
+import os
 import platform
+import subprocess
+import sys
 
 BASE_CONFIG_PATH = "conf/druid/auto"
 
@@ -96,6 +97,54 @@ HEAP_TO_TOTAL_MEM_RATIO = {
 
 LOGGING_ENABLED = False
 
+def load(path, encoding="utf-8"):
+    """ Loads a file content """
+    with open(path, 'r', encoding=encoding, newline="") as handle:
+        tmp = handle.read()
+    return tmp
+
+def get_cpu_count():
+    try:
+        try:
+            # This is necessary to deduce docker cpu_count
+            cfs_quota_us = cfs_period_us = 0
+            # cgroup2
+            if os.path.exists("/sys/fs/cgroup/cgroup.controllers"):
+                cpu_max = load("/sys/fs/cgroup/cpu.max").split()
+                if cpu_max[0] != "max":
+                    if len(cpu_max) == 1:
+                        cfs_quota_us, cfs_period_us = int(cpu_max[0]), 100_000
+                    else:
+                        cfs_quota_us, cfs_period_us = map(int, cpu_max)
+            else:  # cgroup1
+                cfs_quota_us = int(load("/sys/fs/cgroup/cpu/cpu.cfs_quota_us"))
+                cfs_period_us = int(load("/sys/fs/cgroup/cpu/cpu.cfs_period_us"))
+            if cfs_quota_us > 0 and cfs_period_us > 0:
+                return int(math.ceil(cfs_quota_us / cfs_period_us))
+        except (EnvironmentError, TypeError):
+            pass
+        return multiprocessing.cpu_count()
+    except NotImplementedError:
+        # print("multiprocessing.cpu_count() not implemented. Defaulting to 1 cpu")
+        return 1  # Safe guess
+
+def get_memory_limit():
+    try:
+        # This is necessary to deduce docker memory_limit
+        memory_max = 0
+        # cgroup2
+        if os.path.exists("/sys/fs/cgroup/cgroup.controllers"):
+            memory_max = int(load("/sys/fs/cgroup/memory.max"))
+        else:  # cgroup1
+            memory_max = int(load("/sys/fs/cgroup/memory/memory.limit_in_bytes"))
+        if memory_max > 0:
+            return (memory_max/1024/1024)
+    except (EnvironmentError, TypeError):
+        pass
+    physical_memory = get_physical_memory()
+    if physical_memory is None:
+        return 1024  # Safe guess of 1Gb
+    return physical_memory
 
 def print_if_verbose(message):
     if LOGGING_ENABLED:
@@ -391,7 +440,7 @@ def get_physical_memory():
 def convert_total_memory_string(memory):
     try:
         if memory == '':
-            physical_memory = get_physical_memory()
+            physical_memory = get_memory_limit()
 
             if physical_memory is None:
                 raise ValueError('Please specify memory argument')
@@ -446,7 +495,7 @@ def build_mm_task_java_opts_array(task_memory):
 
 
 def compute_tasks_memory(allocated_memory):
-    cpu_count = multiprocessing.cpu_count()
+    cpu_count = get_cpu_count()
 
     if allocated_memory >= cpu_count * 1024:
         task_count = cpu_count
@@ -458,6 +507,11 @@ def compute_tasks_memory(allocated_memory):
         task_count = 2
         task_memory_mb = int(allocated_memory / task_count)
 
+    print_if_verbose(f'\nDetected CPUs: {cpu_count}')
+    print_if_verbose(f'\nAllocated memory: {allocated_memory}')
+    print_if_verbose(f'\nTask count: {task_count}')
+    print_if_verbose(f'\nTask memory mb: {task_memory_mb}')
+
     return task_count, task_memory_mb
 
 
-- 
2.34.1

